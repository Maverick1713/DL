import tensorflow as tf
import keras
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
%matplotlib inline
import numpy as np

(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()
X_train.shape, X_test.shape

X_train=X_train/255
X_test=X_test/255

cnn=models.Sequential([
    #cnn
    layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    #dense
    layers.Flatten(),
    layers.Dense(50, activation='relu'),
    layers.Dense(10, activation='softmax')
])
cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10) 

y_pred=cnn.predict(X_test)
y_classes=[np.argmax(element) for element in y_pred]

plt.matshow(X_test[1])
print("Test Label:",y_test[1])
print("Predicted Value:",y_classes[1])

from sklearn.metrics import confusion_matrix, classification_report
print("Classification Report:\n",classification_report(y_test, y_classes))